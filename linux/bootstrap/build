#!/bin/sh
# returns 0 on successful build or nothing to build
# non-zero exit status only on error during building
set -e  # stop immediately on error

cd $(dirname $0)

# [0-9]*.cc -> bootstrap.cc -> bootstrap_bin
# (layers)   |               |
#          tangle           $CXX

# can also be called with a layer to only build until
#   $ ./build --until 050
UNTIL_LAYER=${2:-zzz}

# we use two mechanisms to speed up rebuilds:
# - older_than: run a command if the output is older than any of the inputs
# - update: if a command is quick to run, always run it but update the result only on any change
#
# avoid combining both mechanisms to generate a single file
# otherwise you'll see spurious messages about files being updated
# risk: a file may unnecessarily update without changes, causing unnecessary work downstream

test "$CXX" || export CXX=c++
test "$CXXFLAGS" || export CXXFLAGS="-g -O3 -std=c++98"  # CI has an ancient version; don't expect recent dialects
export CXXFLAGS="$CXXFLAGS -Wall -Wextra -fno-strict-aliasing"

# return 1 if $1 is older than _any_ of the remaining args
older_than() {
  local target=$1
  shift
  if [ ! -e $target ]
  then
#?     echo "$target doesn't exist"
    echo "updating $target" >&2
    return 0  # success
  fi
  local f
  for f in $*
  do
    if [ $f -nt $target ]
    then
      echo "updating $target" >&2
      return 0  # success
    fi
  done
  return 1  # failure
}

# redirect to $1, unless it's already identical
update() {
  if [ ! -e $1 ]
  then
    cat > $1
  else
    cat > $1.tmp
    diff -q $1 $1.tmp >/dev/null  &&  rm $1.tmp  ||  mv $1.tmp $1
  fi
}

update_cp() {
  if [ ! -e $2/$1 ]
  then
    cp $1 $2
  elif [ $1 -nt $2/$1 ]
  then
    cp $1 $2
  fi
}

noisy_cd() {
  cd $1
  echo "-- `pwd`" >&2
}

older_than tools/enumerate tools/enumerate.cc && {
  $CXX $CXXFLAGS tools/enumerate.cc -o tools/enumerate
}

older_than tools/tangle tools/tangle.cc && {
  noisy_cd tools
    grep -h "^[^ #].*) {" tangle.cc  |sed 's/ {.*/;/'  |update tangle.function_list
    grep -h "^[[:space:]]*void test_" tangle.cc  |sed 's/^\s*void \(.*\)() {$/\1,/'  |update tangle.test_list
    grep -h "^\s*void test_" tangle.cc  |sed 's/^\s*void \(.*\)() {.*/"\1",/'  |update tangle.test_name_list
    $CXX $CXXFLAGS tangle.cc -o tangle
    ./tangle test
  noisy_cd ..  # no effect; just to show us returning to the parent directory
}

LAYERS=$(tools/enumerate --until $UNTIL_LAYER  |grep '.cc$')
older_than bootstrap.cc $LAYERS tools/enumerate tools/tangle && {
  # no update here; rely on 'update' calls downstream
  tools/tangle $LAYERS  > bootstrap.cc
}

grep -h "^[^[:space:]#].*) {$" bootstrap.cc  |grep -v ":.*("  |sed 's/ {.*/;/'  |update function_list
grep -h "^\s*void test_" bootstrap.cc  |sed 's/^\s*void \(.*\)() {.*/\1,/'  |update test_list
grep -h "^\s*void test_" bootstrap.cc  |sed 's/^\s*void \(.*\)() {.*/"\1",/'  |update test_name_list

older_than bootstrap_bin bootstrap.cc *_list && {
  $CXX $CXXFLAGS bootstrap.cc -o bootstrap_bin
  echo
}

exit 0
