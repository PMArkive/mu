#!/bin/sh
# Translate SubX files to a bootable disk image.
#
# This script uses emulation, so it does not require x86 or Linux. However it
# is slow.
#
# A couple of gotchas:
# * Many phases here have no error-checking. Perhaps I should use a
#   version of translate_subx_debug for baremetal.
# * Don't pass in numbered .subx files without translated .mu files. Our test
#   harness is in test.mu, and only Mu programs can run tests in baremetal.
#
# The top level is in general not as rigorous about avoiding dependency cycles
# as the lower-level tools in linux/

set -e
set -v

cat $*            |linux/bootstrap/bootstrap run linux/braces                         > a.braces

cat a.braces      |linux/bootstrap/bootstrap run linux/calls                          > a.calls

cat a.calls       |linux/bootstrap/bootstrap run linux/sigils                         > a.sigils

cat a.sigils      |linux/bootstrap/bootstrap run linux/tests                          > a.tests

# no assort since baremetal SubX doesn't have segments yet

cat a.tests       |linux/bootstrap/bootstrap run linux/dquotes                        > a.dquotes

cat a.dquotes     |linux/bootstrap/bootstrap run linux/pack                           > a.pack

cat a.pack        |linux/bootstrap/bootstrap linux/survey_baremetal   > labels
cat a.pack        |linux/bootstrap/bootstrap linux/labels_baremetal     labels        > a.survey

cat a.survey      |linux/bootstrap/bootstrap run linux/hex                            > a.bin

# Create code.img containing a.bin
dd if=/dev/zero of=code.img count=20160  # 20*16*63 512-byte sectors = almost 10MB
dd if=a.bin of=code.img conv=notrunc

if [ `stat --printf="%s" a.bin` -ge 258048 ]  # 8 tracks * 63 sectors per track * 512 bytes per sector (keep this sync'd with boot.subx)
then
  echo "a.bin won't all be loaded on boot"
  exit 1
fi

# Latter half of disk is for debug info.
dd if=labels of=code.img seek=10080 conv=notrunc  # keep this sync'd with abort.subx
if [ `stat --printf="%s" labels` -ge 131072 ]  # 256 sectors * 512 bytes per sector, the most an ATA drive can read in a single command
then
  echo "labels won't all be loaded on abort"
  exit 1
fi

if [ `wc -l < labels` -gt 4096 ]  # 0x1000 stream capacity in abort.subx
then
  echo "abort will go into infinite regress"
  exit 1
fi
